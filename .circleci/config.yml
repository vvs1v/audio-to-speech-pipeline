version: 2.1

parameters:
  # A parameter per package
  pipeline_workflows:
    type: boolean
    default: false
  ekstep_data_pipelines:
    type: boolean
    default: true

executors:
  node:
    docker:
      - image: circleci/python:3.8.6

jobs:
  build-dags:
    parameters:
      package_name:
        type: string
      env_name:
        type: string
    machine:
      # image: ubuntu-1604:201903-01
      # image: cimg/base:2024.06
      image: ubuntu-2004:202010-01
    working_directory: ~/project/packages/pipeline_workflows
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Build Image
          command: |
            ls -ltr . ; pwd
      - run:
          name: Deploy Pipeline Workflow DAG
          command: |
            echo ${GOOGLE_AUTH} > ${HOME}/gcp-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
            gcloud --quiet config set project ${GCP_PROJECT}
            sh ~/project/packages/pipeline_workflows/deployDAG.sh << parameters.env_name >>
            rm ${HOME}/gcp-key.json

  build:
    parameters:
      package_name:
        type: string

    executor: node
    working_directory: ~/project/packages/<< parameters.package_name >>

    steps:
      - checkout:
          path: ~/project
      # This step is added only to show that we are in the package directory
      - run:
          name: Sanity check to confirm correct package directory
          command: echo "Current package directory is << parameters.package_name >> ..."
      - run:
          name: Setup Testing Environment
          command: |
            python --version ; pip --version ; pwd ; ls
            sudo apt-get update
            sudo apt-get install -y ffmpeg
            sudo apt-get install -y sox
            sudo apt-get install -y gcc-multilib g++-multilib
            sudo apt-get install libpq-dev
            pip install --upgrade pip
            pip install numpy
            pip install wheel  #to install wheel added on 06-06 by vaibhav
            pip install typing_extensions  # Install typing_extensions
            pip install python-dev-tools --user --upgrade
            pip install requests
            pip install cython
            
            
            pip install -r requirements.txt
            python --version ; pip --version ; pwd ; ls
      # - run:
      #     name: Run Tests
      #     command: |
      #       coverage run -m unittest discover src/tests
      #       coverage report --fail-under 20  src/scripts/*.py
      #       coverage html  # open htmlcov/index.html in a browser
      # - store_artifacts:
      #     path: htmlcov
      - persist_to_workspace:
          root: ~/project
          paths:
            - packages/<< parameters.package_name >>

  ekstep_build:

    executor: node
    working_directory: ~/project/packages

    steps:
      - checkout:
          path: ~/project
      # This step is added only to show that we are in the package directory
      - run:
          name: Setup Testing Environment
          command: |
            python --version ; pip --version ; pwd ; ls
            sudo apt-get update --allow-releaseinfo-change
            sudo apt-get install -y ffmpeg
            sudo apt-get install -y sox
            sudo apt-get install -y gcc-multilib g++-multilib
            sudo apt-get install libpq-dev
            pip install --upgrade pip
            pip install numpy
            pip install wheel  #to install wheel added on 06-06 by vaibhav
            pip install typing_extensions  # Install typing_extensions
            pip install python-dev-tools --user --upgrade
            pip install requests
            pip install cython
           
       
            pip install -r requirements.txt
            python --version ; pip --version ; pwd ; ls
      - run:
          name: Generate Linting Report
          command: |
            set +e
            mkdir -p linting_report
            pylint `pwd`  --exit-zero > linting_report/linting_report_.txt
      - store_artifacts:
          path: linting_report
      # - run:
      #     name: Run Tests
      #     command: |
      #       coverage run -m unittest discover -s ekstep_pipelines_tests/ -p "*_tests.py" -v
      #       #coverage report --fail-under 65
      #       coverage html
      #       echo 'open htmlcov/index.html in a browser from circleci artifacts'
      # - store_artifacts:
      #     path: htmlcov
      - persist_to_workspace:
          root: ~/project
          paths:
            - packages
  deploy:
    parameters:
      package_version:
        type: string
      env_name:
        type: string
    #    executor: node
    machine:
      # image: ubuntu-1604:201903-01
      # image: cimg/base:2024.06
      image: ubuntu-2004:202010-01
    working_directory: ~/project/packages

    steps:
      - attach_workspace:
          at: ~/project
      # This step is added to show that files are available from the build job.
      - run:
          name: Content to deploy
          command: |
            ls
            pwd 
      # added pwd to check the directory
      - deploy:
          name: Build and Deploy Image
          command: |
            echo ${GOOGLE_AUTH} > ${HOME}/gcp-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
            gcloud --quiet config set project ${GCP_PROJECT}
            if [[ << parameters.env_name >> == "test" ]]; then
              echo "Build ..."
              docker build --rm=false -t us.gcr.io/${GCP_PROJECT}/ekstep_data_pipelines:<< parameters.package_version >> -t us.gcr.io/${GCP_PROJECT}/ekstep_data_pipelines:<< parameters.env_name >>_<< parameters.package_version >> .
            else
             gcloud docker -- pull us.gcr.io/${GCP_PROJECT}/ekstep_data_pipelines:<< parameters.package_version >>
             echo "Tag ekstep_data_pipelines ... with << parameters.env_name >>"
             docker tag us.gcr.io/${GCP_PROJECT}/ekstep_data_pipelines:<< parameters.package_version >> us.gcr.io/${GCP_PROJECT}/ekstep_data_pipelines:<< parameters.env_name >>_<< parameters.package_version >>
            fi
            gcloud docker -- push us.gcr.io/${GCP_PROJECT}/ekstep_data_pipelines
      - run:
          name: Remove account details
          command: rm ${HOME}/gcp-key.json ; ls
  approval_for_prod_deploy:
    docker:
      - image: circleci/node:4.8.2
    steps:
      - run: echo "Hold for approval"

  E2E:
    working_directory: ~/E2E

    docker:
      - image: circleci/openjdk:8-jdk-stretch
        environment:
          POSTGRES_USER: $POSTGRES_USER
          POSTGRES_PASSWORD: $POSTGRES_PASSWORD

    steps:
      - checkout:
          path: ~/project
      - run:
          name: E2E Tests
          command: |
            mkdir -p ~/.ssh

            echo ${SSH} > ~/.ssh/known_hosts

            cat ~/.ssh/known_hosts

            git clone git@github.com:Open-Speech-EkStep/E2ETest.git
            pwd
            cd ${HOME}
            wget https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-265.0.0-linux-x86_64.tar.gz
            tar -zxf google-cloud-sdk-*
            cd google-cloud-sdk
            pwd
            ./install.sh --quiet
            echo ${GOOGLE_AUTH} > ${HOME}/gcp-key.json
            ./bin/gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
            ./bin/gcloud --quiet config set project ${GCP_PROJECT}
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcp-key.json
            echo $GOOGLE_APPLICATION_CREDENTIALS
            wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
            chmod +x cloud_sql_proxy
            nohup ./cloud_sql_proxy -dir=./cloudsql -instances=ekstepspeechrecognition:us-central1:crowdsourcedb=tcp:5432 &
            sleep 25s
            cat nohup.out
            cd ~/E2E/E2ETest
            pwd
            ls
            mvn dependency:go-offline
            mvn package

  deploy-db:
    parameters:
      mode:
        type: string
      env_name:
        type: string
    working_directory: ~/project/

    docker:
      - image: circleci/python:3.8.6
        environment:
          POSTGRES_USER: $POSTGRES_USER
          POSTGRES_PASSWORD: $POSTGRES_PASSWORD

    steps:
      - checkout:
          path: ~/project
      - run:
          name: Setup proxy for psql and environment
          command: |
            mkdir -p ~/.ssh
            echo ${SSH} > ~/.ssh/known_hosts
            cat ~/.ssh/known_hosts
            cd ${HOME}
            wget https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-265.0.0-linux-x86_64.tar.gz
            tar -zxf google-cloud-sdk-*
            cd google-cloud-sdk
            pwd
            ./install.sh --quiet
            echo ${GOOGLE_AUTH} > ${HOME}/gcp-key.json
            ./bin/gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
            ./bin/gcloud --quiet config set project ${GCP_PROJECT}
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcp-key.json
            echo $GOOGLE_APPLICATION_CREDENTIALS
            wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
            chmod +x cloud_sql_proxy
            nohup ./cloud_sql_proxy -dir=./cloudsql -instances=${GCP_PROJECT}:us-central1:${DB_INSTANCE}=tcp:5432 &
            sleep 25s
            cat nohup.out
            pip install yoyo-migrations
            pip install psycopg2
      - run:
          name: Update migrations
          command: |
            ls ./migrations
            echo " The mode is << parameters.mode >>"
            export env_name=_<< parameters.env_name >>
            if [[ $env_name == "_prod" ]]
            then
              export env_name=''
            fi
            yoyo << parameters.mode >> --database postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost/${POSTGRES_DB} --all -b ./migrations

workflows:
  version: 2

  # Workflows defined for each package.

  ekstep_data_pipelines:
    jobs:
      - ekstep_build:
          name: ekstep_data_pipelines_build
      - deploy:
          name: ekstep_data_pipelines_deploy_test
          env_name: test
          package_version: 1.0.0
          requires:
            - ekstep_data_pipelines_build
      - deploy-db:
          name: ekstep-database-migrations-apply-test
          mode: 'apply'
          env_name: 'test'
          requires:
            - ekstep_data_pipelines_deploy_test
      - build-dags:
          name: pipeline-dag-build_test
          package_name: pipeline_workflows
          env_name: 'test'
          requires:
            - ekstep-database-migrations-apply-test
      - E2E:
          name: ekstep_data_pipelines_e2e_build
          requires:
            - pipeline-dag-build_test
      - approval_for_prod_deploy:
          type: approval
          requires:
            - ekstep_data_pipelines_e2e_build
      - deploy:
          name: ekstep_data_pipelines_deploy_prod
          env_name: prod
          package_version: 1.0.0
          requires:
            - approval_for_prod_deploy
      - deploy-db:
          name: ekstep-database-migrations-apply-prod
          mode: 'apply'
          env_name: 'prod'
          requires:
            - ekstep_data_pipelines_deploy_prod
      - approval_for_prod_deploy:
          name: approval-for-prod-dag-deploy
          type: approval
          requires:
            - ekstep_data_pipelines_deploy_prod
      - build-dags:
          name: pipeline-dag-build_prod
          package_name: pipeline_workflows
          env_name: 'prod'
          requires:
            - ekstep-database-migrations-apply-prod
            - approval-for-prod-dag-deploy


